name: NVD Tool Build

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  JAVA_VERSION: "21"
  COVERAGE_THRESHOLD: 35

jobs:
  code-style:
    name: Code Style
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Check code formatting
        run: mvn spotless:check

      - name: Suggest formatting fixes
        if: failure()
        run: |
          echo "Code formatting issues found. To fix them locally, run:"
          echo "mvn spotless:apply"

  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: code-style

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with coverage
        run: mvn clean test -Pjacoco

      - name: Check coverage threshold
        run: |
          mvn verify -Pjacoco \
            -Djacoco.minimum.coverage=0.${{ env.COVERAGE_THRESHOLD }} \
            -DskipTests

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./target/site/jacoco/jacoco.xml
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Verify JAR execution
        run: java -jar target/nvd-tool-*.jar --help

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [code-style, test, build]
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Update version for release
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Release version: $VERSION"

          # Update pom.xml version
          mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false

      - name: Build release artifact
        run: mvn clean package -DskipTests

      - name: Get artifact name
        id: artifact
        run: |
          JAR_FILE=$(ls target/nvd-tool-*.jar)
          echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "jar_name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.artifact.outputs.jar_file }}
          asset_name: ${{ steps.artifact.outputs.jar_name }}
          asset_content_type: application/java-archive
