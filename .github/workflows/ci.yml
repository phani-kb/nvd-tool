---
name: NVD Tool CI
"on":
  push:
    branches:
    - main
  release:
    types:
    - published
  workflow_dispatch:
    inputs:
      create_release:
        description: Create a new release
        required: false
        default: false
        type: boolean
      release_version:
        description: "Release version (e.g., 1.0.0)"
        required: false
        type: string
env:
  JAVA_VERSION: 21
  COVERAGE_THRESHOLD: 70
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository -Xmx1024m -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
jobs:
  validate-and-test:
    name: "Validate, Test & Coverage"
    runs-on: ubuntu-latest
    outputs:
      artifact-name: "${{ steps.artifact-info.outputs.name }}"
      artifact-size: "${{ steps.artifact-info.outputs.size }}"
      coverage-percentage: "${{ steps.coverage-info.outputs.percentage }}"
      coverage-status: "${{ steps.coverage-info.outputs.status }}"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: "Set up JDK ${{ env.JAVA_VERSION }}"
      uses: actions/setup-java@v4
      with:
        java-version: "${{ env.JAVA_VERSION }}"
        distribution: temurin
    - name: Check code formatting
      run: mvn spotless:check
    - name: Run tests with coverage
      run: |
        mvn clean verify -Pjacoco -Djacoco.minimum.coverage=0.${{ env.COVERAGE_THRESHOLD}} -B -q
    - name: Verify coverage files
      run: |
        echo "Checking for JaCoCo coverage files..."
        find target -name "*.xml" -path "*/jacoco*" || echo "No JaCoCo XML files found"
        find target -name "*.exec" || echo "No JaCoCo exec files found"
        if [ -f target/site/jacoco/jacoco.xml ]; then
          echo "JaCoCo XML file found: target/site/jacoco/jacoco.xml"
          ls -la target/site/jacoco/jacoco.xml
          echo "File size: $(wc -c < target/site/jacoco/jacoco.xml) bytes"
        else
          echo "ERROR: JaCoCo XML file not found at target/site/jacoco/jacoco.xml"
          echo "Contents of target/site/:"
          ls -la target/site/ || echo "target/site/ does not exist"
        fi
    - name: Verify JAR execution
      run: java -jar target/nvd-tool-*.jar --help
    - name: Extract artifact information
      id: artifact-info
      run: |
        JAR_FILE=$(ls target/nvd-tool-*.jar)
        JAR_SIZE=$(du -h "$JAR_FILE" | cut -f1)
        echo "name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT
        echo "size=${JAR_SIZE}" >> $GITHUB_OUTPUT
        echo "path=${JAR_FILE}" >> $GITHUB_OUTPUT
    - name: Extract coverage information
      id: coverage-info
      run: |
        if [ -f target/site/jacoco/index.html ]; then
          PERCENTAGE_RAW=$(grep -o '<tfoot>.*</tfoot>' target/site/jacoco/index.html | grep -o '[0-9]\+%' | head -1)
          if [ -n "$PERCENTAGE_RAW" ]; then
            PERCENTAGE=$(echo "$PERCENTAGE_RAW" | grep -o '[0-9]\+')
            echo "percentage=${PERCENTAGE}" >> $GITHUB_OUTPUT
            if [ $PERCENTAGE -ge ${{ env.COVERAGE_THRESHOLD }} ]; then
              echo "status=✅ Coverage threshold met" >> $GITHUB_OUTPUT
            else
              echo "status=❌ Coverage below threshold" >> $GITHUB_OUTPUT
            fi
          else
            echo "percentage=unknown" >> $GITHUB_OUTPUT
            echo "status=⚠️ Could not parse coverage data" >> $GITHUB_OUTPUT
          fi
        else
          echo "percentage=unknown" >> $GITHUB_OUTPUT
          echo "status=⚠️ Coverage report not found" >> $GITHUB_OUTPUT
        fi
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true
        override_branch: main
        override_build: "${{ github.run_number }}"
        override_commit: "${{ github.sha }}"
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Generate build summary
      if: always()
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY

        # Code Style Section
        if [ "${{ job.status }}" == "success" ]; then
          echo "### Code Style ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Code formatting is correct" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Code Style ❌" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Code formatting issues found" >> $GITHUB_STEP_SUMMARY
          echo "- **Fix**: Run \`mvn spotless:apply\` to fix formatting" >> $GITHUB_STEP_SUMMARY
        fi

        # Test Results Section
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        if [ -d target/surefire-reports ]; then
          TOTAL_TESTS=$(find target/surefire-reports -name "*.xml" -exec grep -l "testcase" {} \; | wc -l)
          if [ $TOTAL_TESTS -gt 0 ]; then
            PASSED_TESTS=$(find target/surefire-reports -name "*.xml" -exec grep -c "testcase.*>" {} \; | awk '{sum += $1} END {print sum}')
            FAILED_TESTS=$(find target/surefire-reports -name "*.xml" -exec grep -c "testcase.*failure" {} \; | awk '{sum += $1} END {print sum}')
            ERROR_TESTS=$(find target/surefire-reports -name "*.xml" -exec grep -c "testcase.*error" {} \; | awk '{sum += $1} END {print sum}')
            echo "- **Total Tests**: ${PASSED_TESTS:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- **Passed**: $((${PASSED_TESTS:-0} - ${FAILED_TESTS:-0} - ${ERROR_TESTS:-0}))" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed**: ${FAILED_TESTS:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- **Errors**: ${ERROR_TESTS:-0}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ⚠️ No test results found" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **Status**: ⚠️ Test reports directory not found" >> $GITHUB_STEP_SUMMARY
        fi

        echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage**: ${{ steps.coverage-info.outputs.percentage }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Threshold**: ${{ env.COVERAGE_THRESHOLD }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ steps.coverage-info.outputs.status }}" >> $GITHUB_STEP_SUMMARY

        echo "### Build Artifact" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact**: ${{ steps.artifact-info.outputs.name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Size**: ${{ steps.artifact-info.outputs.size }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Build successful" >> $GITHUB_STEP_SUMMARY
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate-and-test
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch'
      && inputs.create_release == true)
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: "Set up JDK ${{ env.JAVA_VERSION }}"
      uses: actions/setup-java@v4
      with:
        java-version: "${{ env.JAVA_VERSION }}"
        distribution: temurin
    - name: Determine release version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ inputs.release_version }}"
          if [ -z "$VERSION" ]; then
            VERSION="$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          fi
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
    - name: Build release artifact
      run: |
        # Update pom.xml version
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version }} -DgenerateBackupPoms=false

        # Build artifact
        mvn clean package -DskipTests
    - name: Get artifact name
      id: artifact
      run: |
        JAR_FILE=$(ls target/nvd-tool-*.jar)
        JAR_SIZE=$(du -h "$JAR_FILE" | cut -f1)
        CURRENT_DATE=$(date)
        echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "jar_name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT
        echo "jar_size=$JAR_SIZE" >> $GITHUB_OUTPUT
        echo "created_date=$CURRENT_DATE" >> $GITHUB_OUTPUT
    - name: Create GitHub Release (for manual trigger)
      if: github.event_name == 'workflow_dispatch' && inputs.create_release == true
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ steps.version.outputs.version }}"
        name: "Release v${{ steps.version.outputs.version }}"
        body: |
          Release v${{ steps.version.outputs.version }}

          **Artifact**: ${{ steps.artifact.outputs.jar_name }}
          **Size**: ${{ steps.artifact.outputs.jar_size }}
          **Created**: ${{ steps.artifact.outputs.created_date }}
        files: |
          ${{ steps.artifact.outputs.jar_file }}
        draft: false
        prerelease: false
    - name: Upload release asset (for release event)
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ steps.artifact.outputs.jar_file }}
    - name: Generate release summary
      run: |
        VERSION=${{ steps.version.outputs.version }}
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${VERSION}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact**: ${{ steps.artifact.outputs.jar_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Size**: ${{ steps.artifact.outputs.jar_size }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Created**: ${{ steps.artifact.outputs.created_date }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Release created successfully" >> $GITHUB_STEP_SUMMARY
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: validate-and-test
    if: github.event_name != 'release' && !(github.event_name == 'workflow_dispatch'
      && inputs.create_release == true)
    steps:
    - name: Generate summary
      run: |-
        echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact**: ${{ needs.validate-and-test.outputs.artifact-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Size**: ${{ needs.validate-and-test.outputs.artifact-size }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage**: ${{ needs.validate-and-test.outputs.coverage-percentage }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
